import numpy as np
import matplotlib.pyplot as plt

def get_time_to(text, f, k, M, n):
    
    if text == 'f':
        return np.random.exponential(1./f) # next reaction time
    if text == 'n':
        if M > n:
            return np.random.exponential(1./(k*(M-n)))
        else:
            return np.inf

def get_v(t, lam, tau_v, mu, n0, v0):
    A = np.exp(-t*(lam + 1/tau_v))
    B = -np.exp(t/tau_v)*mu*tau_v + np.exp(lam*t)*(n0*mu*tau_v + v0*(-1+lam*tau_v))
    C = -1 + lam*tau_v
    
    return A*B/C

def get_n_c(t, lam, n0):
    return n0*np.exp(-lam*t)

def hill(x, H, x_max):
    # x is n_c or k
    x_star = 1
    return x / (x / x_star)**H

def get_arg_type(i):
    if i == 0:
        return 'f'
    if i == 1:
        return 'n'
    if i == 2:
        return 'measure'
    
def to_dict(**x):
    return x

def run_test(f, args):
    
    # Define parameters
    run_time = args['run_time']
    k = args['k'] # Refill/s (n |--> n+1)
    mu = args['mu'] # nt voltage coefficient, high means nt's add a lot of voltage
    tau_v = args['tau_v'] # voltage decay rate
    lam = args['lam'] # nt decay rate, high means NT decays so fast that it barely adds voltage
    M = args['M']
    pr = args['pr']
    n_r = args['n_r'] # number of neurotransmitters released per AP
    vth = args['vth']

    delta_t = args['delta_t']
    
    current_time = 0
    v_membrane = 0
    n_c = 0
    n = 10
    
    n_history = [[n, current_time]]
    n_c_history = [[n_c, current_time]]
    v_history = [[v_membrane,current_time]] # data array
    b_history = []
    AP_times = []
    
    n_bursts = 0
    n_bursts_list = []
    
    t_measure = delta_t
    

    while current_time < run_time:
        
        time_to_f = get_time_to('f', f, k, M, n) # next reaction time
        time_to_n = get_time_to('n', f, k, M, n)
        
        times_array = np.array([time_to_f, time_to_n, t_measure])
    
        t_min_arg = np.argmin(times_array)
        arg_type = get_arg_type(t_min_arg)
        t_min = times_array[t_min_arg]
    
        if arg_type == 'f':
            
            v_membrane = get_v(t_min, lam, tau_v, mu, n_c, v_membrane)
            n_c = get_n_c(t_min, lam, n_c)
    
            b = np.random.binomial(n, pr)
            b_history.append(b)
            n_bursts += 1
    
            n -= b
            n_c += b*n_r
            n_history.append([n, current_time])
            
            if v_membrane >= vth:
                v_membrane = 0
                AP_times.append(current_time)
                n_bursts_list.append(n_bursts)
                n_bursts = 0
            
            current_time += t_min
            t_measure -= t_min
            
        elif arg_type == 'n':
            
            v_membrane = get_v(t_min, lam, tau_v, mu, n_c, v_membrane)
            n_c = get_n_c(t_min, lam, n_c)
            
            n += 1
            n_history.append([n, current_time])
            
            if v_membrane >= vth:
                v_membrane = 0
                AP_times.append(current_time)
                n_bursts_list.append(n_bursts)
                n_bursts = 0

            current_time += t_min
            t_measure -= t_min
            
        else:
    
            v_membrane = get_v(t_min, lam, tau_v, mu, n_c, v_membrane)
            n_c = get_n_c(t_min, lam, n_c)
            
            if v_membrane >= vth:
                v_membrane = 0       
                AP_times.append(current_time)
                n_bursts_list.append(n_bursts)
                n_bursts = 0
    
            v_history.append([v_membrane, current_time])
            n_c_history.append([n_c, current_time])
    
            current_time += t_min
            t_measure = delta_t
            
    n_history = np.array(n_history)
    n_c_history = np.array(n_c_history)
    v_history = np.array(v_history) # data array
    b_history = np.array(b_history)
    AP_times = np.array(AP_times)
    
    inter_AP_times = np.diff(AP_times)
    mean_inter_AP_time = np.mean(inter_AP_times)
    CV = np.var(inter_AP_times) / mean_inter_AP_time
    
    return {'v_history': np.array(v_history),
            'n_history':np.array(n_history),
            'n_c_history':np.array(n_c_history),
            'b_history':np.array(b_history),
            'AP_times':np.array(AP_times),
            'inter_AP_times':np.array(inter_AP_times),
            'n_bursts_list':np.array(n_bursts_list),
            'mean_inter_AP_time':mean_inter_AP_time, 
            'CV':CV}
###############################################################################
#
#                               Main Code
#
###############################################################################

# Test 1

run_time = 1

# Rates (#/s)
AP_freq =  50 # AP/s
k = 30 # Refill/s (n |--> n+1)

tau_v = 1 # inverse voltage decay rate, THIS TIMES (lam) CAN'T BE 1
lam = 100 # nt decay rate, THIS TIMES (tau_v) CAN'T BE 1

mu = 0.000001 # neuro-transmitter voltage coefficient (volts/1 NT)
n_r = 10000 # number of neurotransmitters released per AP, 10k from source [n_r] below
M = 100 # number of docking sites, from source [M] below, says 200 but at rest only 100
pr = 0.3
vth = 0.2
delta_t = 0.01

if lam*tau_v == 1:
    raise Exception('Error: lam*tau_v == 1')
    
args = to_dict(k = k, mu = mu, lam = lam, M = M, pr = pr, n_r = n_r, vth = vth,
               tau_v = tau_v, delta_t = delta_t, run_time = run_time)

results = run_test(AP_freq, args)

v_history = results['v_history']
n_bursts_list = results['n_bursts_list']
mean_inter_AP_time = results['mean_inter_AP_time']
n_c_history = results['n_c_history']
n_history = results['n_history']
AP_times = results['AP_times']

# =============================================================================
# plt.plot(v_history[:, 1], v_history[:, 0])
# plt.plot([], [], ' ', label = 'Mean num bursts = {}'.format(np.around(np.mean(n_bursts_list), 3)))
# plt.plot([], [], ' ', label = 'Mean inter-AP time = {}'.format(np.around(mean_inter_AP_time,3)))
# plt.plot([], [], ' ', label = 'f = {}, k = {}, M = {}, \npr = {}, vth = {}, n_r = {}'.format(\
#                                 AP_freq, k, M, pr, vth, n_r))
# plt.plot([], [], ' ', label = 'mu = {}, tau_v = {}, lam = {}'.format(mu, tau_v, lam))
# plt.plot([], [], ' ', label = '---------------------------------------')
# plt.plot([], [], ' ', label = 'v\'(t) = mu*n_c(t) - v(t)/tau\nn\'_c = -lam*n_c(t)')
# plt.legend(loc = 'upper right', framealpha = 0.5, edgecolor = 'k')
# plt.ylabel('Membrane voltage')
# plt.xlabel('Time')
# plt.show()
# =============================================================================

fig, ax = plt.subplots(2,2)
ax[0,0].plot(v_history[:, 1], v_history[:, 0])
ax[0,1].plot(n_c_history[:, 1], n_c_history[:, 0])
ax[1,0].plot(n_history[:, 1], n_history[:, 0])

ax[1,1].plot([], [], ' ', label = 'Mean num bursts = {}'.format(np.around(np.mean(n_bursts_list), 3)))
ax[1,1].plot([], [], ' ', label = 'Mean inter-AP time = {}'.format(np.around(mean_inter_AP_time,3)))
ax[1,1].plot([], [], ' ', label = 'f = {}, k = {}, M = {}, \npr = {}, vth = {}, n_r = {}'.format(\
                                AP_freq, k, M, pr, vth, n_r))
ax[1,1].plot([], [], ' ', label = 'mu = {}, tau_v = {}, lam = {}'.format(mu, tau_v, lam))
ax[1,1].plot([], [], ' ', label = '---------------------------------------')
ax[1,1].plot([], [], ' ', label = 'v\'(t) = mu*n_c(t) - v(t)/tau\nn\'_c = -lam*n_c(t)')
ax[1,1].legend(loc = 'upper right', framealpha = 0.5, edgecolor = 'k', fontsize = 7)

plt.show()

# =============================================================================
# plt.figure()
# plt.plot(n_c_history[:, 1], n_c_history[:, 0])
# plt.show()
# 
# plt.figure()
# plt.plot(n_history[:, 1], n_history[:, 0])
# plt.show()
# =============================================================================

# Test 2

# =============================================================================
# f_list = range(20, 101)
# post_synaptic_mean_AP_freq_list = []
# CV_list = []
# n_bursts_mean_list = []
# for f in f_list:
#     print(f)
#     results = run_test(f, args)
#     post_synaptic_mean_AP_freq_list.append(1./results['mean_inter_AP_time'])
#     CV_list.append(results['CV'])
#     n_bursts_mean_list.append(np.mean(results['n_bursts_list']))
#     
# # =============================================================================
# # plt.figure()
# # plt.plot(f_list, post_synaptic_mean_AP_freq_list, label = 'Mean frequency')
# # plt.plot(f_list, CV_list, label = 'CV')
# # plt.show()
# # =============================================================================
# 
# fig, ax = plt.subplots(1,3)
# ax[0].plot(f_list, post_synaptic_mean_AP_freq_list, label = 'Mean frequency')
# ax[1].plot(f_list, CV_list, label = 'CV')
# ax[2].plot(f_list, n_bursts_mean_list, label = 'Mean num. of bursts')
# 
# ax[0].legend()
# ax[1].legend()
# ax[2].legend()
# 
# plt.show()
# =============================================================================


###############################################################################
#
#                               Sources
#
###############################################################################

# [n_r] The number of neurotransmitters per vesicle is 1e4, from:
# https://www.ncbi.nlm.nih.gov/books/NBK10866/

# [M]
#https://www.cell.com/current-biology/pdf/S0960-9822(04)00223-4.pdf

