import numpy as np
import matplotlib.pyplot as plt

class Neuron:
    def __init__(self, args_dict):
        
        self.v_membrane = 0
        self.n_c = 0
        self.M = args_dict['M']
        self.pr = args_dict['pr']
        self.c = args_dict['c']
        self.f = args_dict['f']
        self.k = args_dict['k']
        self.mu = args_dict['mu']
        self.vth = args_dict['vth']
        self.tau_v = args_dict['tau_v']  # Membrane voltage decay constant
        self.run_time = args_dict['run_time']
        self.n_r = args_dict['n_r'] # neurotransmitters released per vesicle
        self.lam = args_dict['lam'] # neurotransmitter decay rate
        self.n_type = args_dict['n_type']
        self.delay_timer = 'none'
        self.delay_timer_value = args_dict['delay_timer_value']
        
        self.E = 0
        self.b = 0
        self.b_previous = 0
        self.refill_probability = 0
        self.t_difference = 0
        self.t_previous_received_AP = 0  # previous firing time
        self.t_previous_fired_AP = 0

        self.pre = []
        self.post = []
        self.AP_times = []
        
        self.b_history = [0]
        self.v_history = [0]
        self.t_history = [0]
        self.n_c_history = [0]

    def refill_release_vesicles(self, t_current):
        
        # Refill vesicles
        self.b_previous = self.b
        t_difference = t_current - self.t_previous_fired_AP
        refill_probability = 1 - np.exp(-t_difference * self.k)
        vesicles_refilled = np.random.binomial(self.E, refill_probability)
        self.E -= vesicles_refilled

        # Release vesicles
        self.b = np.random.binomial(self.M-self.E, self.pr)  # Number released
        self.E += self.b
        self.t_previous_fired_AP = t_current
        self.b_history.append(self.b)

    def update_voltage(self, t_current, neuron):
        # Update voltage
        if self.n_type == 'non nt':
            
            t_difference = t_current - neuron.t_previous_received_AP
            reduction = np.exp(-(t_difference)/neuron.tau_v)
            voltage_addition = self.c*self.b
            neuron.v_membrane = neuron.v_membrane*reduction + voltage_addition
            neuron.v_history.append(neuron.v_membrane)
            neuron.t_history.append(t_current)
            neuron.t_previous_received_AP = t_current

# =============================================================================
#         if self.n_type == 'nt':
#             
#             t_difference = t_current - neuron.t_previous_received_AP
#             reduction = np.exp(-(t_difference)/neuron.tau_v)
#             voltage_addition = self.c*self.b
#             neuron.v_membrane = neuron.v_membrane*reduction + voltage_addition
#             neuron.v_history.append(neuron.v_membrane)
#             neuron.t_history.append(t_current)
#             neuron.t_previous_received_AP = t_current            
# =============================================================================
            
        if self.n_type == 'nt':
            t_difference = t_current - neuron.t_previous_received_AP
            voltage_addition = self.c*self.b
            neuron.v_membrane = get_v_nt(t_difference, b = self.b, v_0 = neuron.v_membrane,
                                         n_0 = self.n_c, lam = self.lam, tau_v = neuron.tau_v,
                                         mu = self.mu, n_r = self.n_r) \
                                         + voltage_addition
            self.n_c = get_n_c(t_difference, n_0 = self.n_c, b = self.b_previous, 
                               lam = self.lam, n_r = self.n_r) \
                                + self.b*self.n_r
    
            neuron.v_history.append(neuron.v_membrane)
            neuron.n_c_history.append(self.n_c)
            neuron.t_history.append(t_current)
            neuron.t_previous_received_AP = t_current

    def fire_AP(self, t_current):
        # Check for over threshold action potential firing
        if self.v_membrane >= self.vth:
            self.v_membrane = 0
            self.AP_times.append(t_current)

    def get_data(self):
        self.AP_times_steady_state = np.array([t for t in self.AP_times if t > 0.2*self.run_time])

        if len(self.AP_times_steady_state) > 1:
            self.inter_AP_times = np.diff(self.AP_times)
            self.cv2 = np.var(self.inter_AP_times)/np.mean(self.inter_AP_times)**2
            self.mean_frequency = 1/np.mean(self.inter_AP_times)
        else:
            self.inter_AP_times = [0]
            self.mean_frequency = 0
            self.cv2 = 0

    def plot_v_history(self):
        fontsize = 20
        t_mod, v_mod = get_mod_v_hist(self)
        plt.plot(t_mod, v_mod, label = 'v_history')
        plt.plot(t_mod, self.vth*np.ones(len(t_mod)), label = 'vth')
        plt.plot([], [], ' ', label = 'Mean f = {}'.format(
            np.around(self.mean_frequency,3)))
        plt.legend(loc = 'upper right', fontsize = fontsize - 5)
        plt.xlabel('Time', fontsize = fontsize)
        plt.ylabel('Membrane Potential', fontsize = fontsize)
        plt.xticks(fontsize = fontsize)
        plt.yticks(fontsize = fontsize)
        plt.show()
        
    def firing_condition(self):
        return self.v_membrane >= self.vth
    
    
def get_v_nt(t, b, v_0, n_0, lam, tau_v, mu, n_r):
    
    A = 1/(lam*(-1+lam*tau_v))*np.exp(-t*(lam + 1/tau_v))
    B = lam*(-np.exp(t/tau_v)*n_0*mu*tau_v + np.exp(lam*t)*(-v_0 + lam*v_0*tau_v + n_0*mu*t))
    C = b*mu*tau_v*(np.exp(t/tau_v)-np.exp(lam*t)*lam*tau_v + np.exp(t*(lam+1/tau_v))*(-1+lam*tau_v))*n_r
    return A*(B+C)

def get_n_c(t, n_0, b, lam, n_r):
    return np.exp(-lam*t)*(lam*n_0 + b*(-1+np.exp(lam*t))*n_r)/lam

def to_dict(**x):
    return x

def add_exp_time(AP_rate):
    return np.random.exponential(1./AP_rate)

def get_next_time(AP_rate):
    return np.random.exponential(1./AP_rate)

def get_times(rates, run_time):
    time_array_list = []
    for idx, r in enumerate(rates):
        if r == 0:
            continue
        time_array = []
        t_current = 0
        while t_current < run_time:
            next_time = get_next_time(r)
            added_time = next_time + t_current
            if added_time < run_time:
                time_array.append([added_time, idx])
            t_current += next_time
        time_array_list.extend(time_array)

    # Sort based on the first element (time) of each sublist
    time_array_list.sort(key=lambda x: x[0])
    return np.array(time_array_list)

def get_mod_v_hist(neuron):

    times = neuron.t_history
    v_history = neuron.v_history
    AP_history = neuron.AP_times

    tau_v = neuron.tau_v

    n_samples = 100

    t_mod = []
    v_mod = []

    for i in range(len(times) - 1):

        t_array = np.linspace(1e-6, times[i+1] - times[i], n_samples)

        if times[i] not in AP_history:
            decay_array = v_history[i]*np.exp(-t_array/tau_v)
            t_mod.append(times[i] + t_array[:-1])
            v_mod.append(decay_array[:-1])

        if times[i] in AP_history:
            decay_array = np.array(
                [v_history[i]] + [0 for i in range(n_samples - 2)])
            t_mod.append(times[i] + t_array[:-1])
            v_mod.append(decay_array)

    return np.array(t_mod).reshape(-1), np.array(v_mod).reshape(-1)


def exc_inh_model(f1, f2, run_time):

    n1_dict = to_dict(M=20, pr=0.3, c=0.02, f=f1, k=20, tau_v=1, vth=0.2)
    n2_dict = to_dict(M=20, pr=0.3, c= -0.008, f=f2, k=20, tau_v=1, vth=0.2)

    n3_dict = to_dict(tau_v=0.01, vth=0.2, M=0, pr=0, c=0, f=0, k=0)

    n1 = Neuron(n1_dict)
    n2 = Neuron(n2_dict)
    n3 = Neuron(n3_dict)

    firing_times = get_times([n1.f, n2.f], run_time)

    for t_current, i in firing_times:

        if i == 0:
            n1.refill_release_vesicles(t_current)
            n1.update_voltage(t_current, n3)
            if n3.v_membrane >= n3.vth:
                n3.fire_AP(t_current)
        if i == 1:
            n2.refill_release_vesicles(t_current)
            n2.update_voltage(t_current, n3)
            if n3.v_membrane >= n3.vth:
                n3.fire_AP(t_current)
    n3.get_data()

    # Mean period is T = mean time between action potentials
    # Frequency is 1 / T
    return n3

def incoherent_feedforward(f1, params_dict, end_time):
    
    n1_dict = to_dict(M=params_dict['M1'], pr=params_dict['pr1'], c=params_dict['c1'], 
                      f=f1, k=params_dict['k1'], tau_v=0, vth=0, mu = 0, n_r = 0,  lam = 0,
                      n_type = params_dict['n_type1'], delay_timer_value = 0,
                      run_time = params_dict['run_time'])

    n2_dict = to_dict(M=params_dict['M2'], pr=params_dict['pr2'], c=params_dict['c2'], 
                      f = 0, k=params_dict['k2'], tau_v=params_dict['tau_v2'], 
                      vth=params_dict['vth2'], n_r  = params_dict['nr2'],
                      mu = params_dict['mu2'], lam = params_dict['lam2'],
                      n_type = params_dict['n_type2'],
                      delay_timer_value = params_dict['delay_timer_value'],
                      run_time = params_dict['run_time'])
    
    n3_dict = to_dict(tau_v=params_dict['tau_v3'], vth=params_dict['vth3'], 
                      M=0, pr=0, c=0, f=0, k=0, mu = 0, n_r = 0, lam = 0, 
                      n_type = params_dict['n_type3'], delay_timer_value = 0,
                      run_time = params_dict['run_time'])

    n12 = Neuron(n1_dict)
    n13 = Neuron(n1_dict)
    n2 = Neuron(n2_dict)
    n3 = Neuron(n3_dict)
    
    n_pre = Neuron(n1_dict)
    n_post = Neuron(n3_dict)

    t_current = 0

    while t_current < end_time:
        #        print(t_current / end_time)
        add_time = add_exp_time(f1)

        if n2.delay_timer != 'none':
            t_diff = n2.delay_timer - add_time
            if t_diff > 0:
                n2.delay_timer -= add_time
            if t_diff <= 0:
                t_current_delayed = t_current + n2.delay_timer
                n2.update_voltage(t_current_delayed, n3)
                if n3.firing_condition() == True:
                    n3.fire_AP(t_current_delayed)
# =============================================================================
#                 n2.refill_release_vesicles(t_current_delayed)
#                 n2.fire_AP(t_current_delayed)
# =============================================================================
                n2.delay_timer = 'none'

        t_current = t_current + add_time

        n13.refill_release_vesicles(t_current)
        n12.refill_release_vesicles(t_current)

        n13.update_voltage(t_current, n3)
        n12.update_voltage(t_current, n2)
        
        n_pre.refill_release_vesicles(t_current)
        n_pre.update_voltage(t_current, n_post)
        

        if n_post.firing_condition() == True:
            n_post.fire_AP(t_current)

        if n3.firing_condition() == True and n2.firing_condition() == False:
            n3.fire_AP(t_current)

        elif (n3.firing_condition() == False and n2.firing_condition() == True):
            
            if n2.delay_timer == 'none':
                n2.delay_timer = n2.delay_timer_value
            n2.refill_release_vesicles(t_current)
            
            n2.fire_AP(t_current)
# =============================================================================
#         if n3.firing_condition() == False and n2.firing_condition() == False:
#             pass
# =============================================================================

        elif n3.firing_condition() == True and n2.firing_condition() == True:
            if n2.delay_timer == 'none':
                n2.delay_timer = n2.delay_timer_value
            n2.refill_release_vesicles(t_current)
            n2.fire_AP(t_current)
            n3.fire_AP(t_current)
            
        else:
            pass

    n3.get_data()
    n_post.get_data()
    n2.get_data()

    return n12, n13, n2, n_pre, n_post, n3

###############################################################################
#
#                               Main code
#
###############################################################################
# DEQ:
# v' = mu*n_c - v/tau
# n'_c = n_r*b-lam*n_c

# IT MUST BE THE CASE THAT (   lam != 1/tau   ) OTHERWISE UPDATE_VOLTAGE WILL FAIL

# =============================================================================
# run_time = 60
# 
# # IT MUST BE THE CASE THAT ( lam != 1/tau ) OTHERWISE UPDATE_VOLTAGE WILL FAIL
# params_dict = to_dict(M1 = 100, M2 = 100,
#                       pr1 = 0.3, pr2 = 0.3,
#                       c1 = 0.02, c2 = -0.175,
#                       k1 = 2, k2 = 0.5,
#                       vth2 = 0.2, vth3 = 0.2,
#                       tau_v2 = 0.2, tau_v3 = 0.1,
#                       mu2 = 0.01, nr2 = 0.01, lam2 = 0.01,
#                       n_type1 = 'non nt', n_type2 = 'nt', n_type3 = 'non nt',
#                       delay_timer_value = 0.001,
#                       run_time = run_time)
# 
# n12, n13, n2, n_pre, n_post, n3 = incoherent_feedforward(50, params_dict, run_time)
# n2.get_data()
# t2, v2 = get_mod_v_hist(n2)
# t3, v3 = get_mod_v_hist(n3)
# t_post, v_post = get_mod_v_hist(n_post)
# 
# plt.plot(t3, v3, label = 'v3')
# plt.plot(t3, n3.vth*np.ones(len(t3)), label = 'vth3')
# plt.plot(t3, 0*np.ones(len(t3)), color = 'k')
# plt.plot(t2, v2, label = 'v2')
# plt.plot(t2, n2.vth*np.ones(len(t2)), label = 'vth2')
# # =============================================================================
# # plt.plot(t_post, v_post, label = 'v_post')
# # plt.plot(t_post, n_post.vth*np.ones(len(t_post)), label = 'v_post')
# # =============================================================================
# plt.plot([], [], ' ', label = 'f = {}'.format(np.around(n3.mean_frequency,3)))
# # =============================================================================
# # plt.plot(t_post, v_post, label = 'n_post')
# # =============================================================================
# plt.legend()
# plt.show()
# =============================================================================

run_time = 60*60

# IT MUST BE THE CASE THAT ( lam != 1/tau ) OTHERWISE UPDATE_VOLTAGE WILL FAIL
params_dict = to_dict(M1 = 100, M2 = 100,
                      pr1 = 0.3, pr2 = 0.3,
                      c1 = 0.02, c2 = -0.175,
                      k1 = 2, k2 = 0.5,
                      vth2 = 0.2, vth3 = 0.2,
                      tau_v2 = 0.1, tau_v3 = 0.01,
                      mu2 = 0.01, nr2 = 0.01, lam2 = 0.01,
                      n_type1 = 'non nt', n_type2 = 'nt', n_type3 = 'non nt',
                      delay_timer_value = 0.001,
                      run_time = run_time)

f_list = np.arange(1, 100)
# =============================================================================
# f_list = np.linspace(1,100, 1000) 
# =============================================================================
frequency_array_2 = np.zeros(len(f_list))
frequency_array_3 = frequency_array_2.copy()
cv2_2 = np.zeros(len(f_list))
cv2_3 = cv2_2.copy()
cv2_post = cv2_2.copy()

frequency_array_post = np.zeros(len(f_list))
for i, f in enumerate(f_list): # y axis
    print(i/len(f_list))
    n12, n13, n2, n_pre, n_post, n3 = incoherent_feedforward(f, params_dict, run_time)
    frequency_array_3[i] = n3.mean_frequency
    frequency_array_2[i] = n2.mean_frequency
    cv2_2[i] = n2.cv2
    cv2_3[i] = n3.cv2
    frequency_array_post[i] = n_post.mean_frequency
    cv2_post[i] = n_post.cv2
#%%
fontsize = 20
plt.figure()
plt.title('Incoherent feed forward network: \nmean firing frequency of third neuron', fontsize=fontsize)
plt.plot(f_list, frequency_array_3, label = 'IFF: Output neuron')
plt.plot(f_list, frequency_array_2, label = 'IFF: Inhibitatory interneuron')
plt.plot(f_list, frequency_array_post, label = 'Open loop output neuron')
plt.plot([], [], ' ', label = '-----------------------')
plt.plot([], [], ' ', label = 'M12 = {}, pr12 = {}, c12 = {}, k12 = {}'.format(
    n12.M, n12.pr, n12.c, n12.k))
plt.plot([], [], ' ', label = 'M13 = {}, pr13 = {}, c13 = {}, k13 = {}'.format(
    n13.M, n13.pr, n13.c, n13.k))
plt.plot([], [], ' ', label = 'M23 = {}, pr23 = {}, c23 = {}, k23 = {}, \ntau_v2 = {}, tau_v3 = {}'.format(
    n2.M, n2.pr, n2.c, n2.k, n2.tau_v, n3.tau_v))
plt.plot(f_list, 0*np.ones(len(f_list)), color = 'black')
plt.plot([], [], ' ', label = 'Delay = {}s'.format(n2.delay_timer_value))
plt.plot([], [], ' ', label = '-----------------------')
plt.plot([], [], ' ', label = '$v\'=mu*n_c-v/tau$\tmu = {}\n$n\'_c=n_r*b-lam*n_c$\t n_r = {}, lam = {}'.format(n2.mu,n2.n_r,n2.lam))

plt.xlabel('Input neuron frequency (Hz)', fontsize=fontsize)
plt.ylabel('AP firing frequency (Hz)', fontsize=fontsize)
plt.xticks(fontsize=fontsize)
plt.yticks(fontsize=fontsize)
plt.legend(fontsize = fontsize - 5, frameon = True, 
           edgecolor = 'black', framealpha = 0.5, loc = 'center right')
plt.show()

plt.figure()
plt.title('CV2', fontsize = fontsize)
plt.plot(cv2_3, label = 'IFF: Output neuron')
plt.plot(cv2_2, label = 'IFF: Inhibitatory interneuron')
plt.plot(cv2_post, label = 'Open loop: Output neuron')
plt.xlabel('Input neuron frequency (Hz)', fontsize=fontsize)
plt.ylabel('CV2', fontsize=fontsize)

plt.plot([], [], ' ', label = '-----------------------')
plt.plot([], [], ' ', label = 'M12 = {}, pr12 = {}, c12 = {}, k12 = {}'.format(
    n12.M, n12.pr, n12.c, n12.k))
plt.plot([], [], ' ', label = 'M13 = {}, pr13 = {}, c13 = {}, k13 = {}'.format(
    n13.M, n13.pr, n13.c, n13.k))
plt.plot([], [], ' ', label = 'M23 = {}, pr23 = {}, c23 = {}, k23 = {}, \ntau_v2 = {}, tau_v3 = {}'.format(
    n2.M, n2.pr, n2.c, n2.k, n2.tau_v, n3.tau_v))
plt.plot(f_list, 0*np.ones(len(f_list)), color = 'black')
plt.plot([], [], ' ', label = 'Delay = {}s'.format(n2.delay_timer_value))
plt.plot([], [], ' ', label = '-----------------------')
plt.plot([], [], ' ', label = '$v\'=mu*n_c-v/tau$\tmu = {}\n$n\'_c=n_r*b-lam*n_c$\t n_r = {}, lam = {}'.format(n2.mu,n2.n_r,n2.lam))


plt.xticks(fontsize=fontsize)
plt.yticks(fontsize=fontsize)
plt.legend(fontsize = fontsize - 5, frameon = True, 
           edgecolor = 'black', framealpha = 0.5, loc = 'center right')
plt.show()

# https://www.ncbi.nlm.nih.gov/books/NBK10921/
# 0.5 - 10 m/s for unmylineated, up to 150 m/s for mylineated

# =============================================================================
# def get_v_nt(t, lam, tau_v, b, n, n0, v0):
#     numerator = (np.exp(-t * (lam + tau_v)) * (-b * n * (np.exp(lam * t) *\
#                 lam - np.exp(t * tau_v) * tau_v + np.exp(t * (lam + tau_v)) * (-lam + tau_v))\
#                 + lam * tau_v * (-np.exp(t * tau_v) * n0 + np.exp(lam * t) * \
#                 (n0 + lam * v0 - tau_v * v0))))
#     denominator = lam * (lam - tau_v) * tau_v
#     return numerator / denominator
# 
# def n_c(t, lam, n, n0):
#     return (np.exp(-lam * t) * (n * (-1 + np.exp(lam * t)) + lam * n0)) / lam
# 
# lam = 1
# tau = 1
# b = 1
# n = 1
# n0 = 1
# v0 = 1
# =============================================================================
